<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>il.co.dsp11</groupId>
	<artifactId>Knowledge-base-for-Word-Prediction</artifactId>
	<version>1.0-SNAPSHOT</version>

	<properties>
		<maven.compiler.source>15</maven.compiler.source>
		<maven.compiler.target>15</maven.compiler.target>

		<!-- Your exact Hadoop version here-->
		<hadoop.version>RELEASE</hadoop.version>
		<property>
			<name>fs.s3a.aws.credentials.provider</name>
			<value>
				org.apache.hadoop.fs.s3a.TemporaryAWSCredentialsProvider,
				org.apache.hadoop.fs.s3a.SimpleAWSCredentialsProvider,
				com.amazonaws.auth.EnvironmentVariableCredentialsProvider,
				org.apache.hadoop.fs.s3a.auth.IAMInstanceCredentialsProvider
			</value>
			<description>
				Comma-separated class names of credential provider classes which implement
				com.amazonaws.auth.AWSCredentialsProvider.

				When S3A delegation tokens are not enabled, this list will be used
				to directly authenticate with S3 and DynamoDB services.
				When S3A Delegation tokens are enabled, depending upon the delegation
				token binding it may be used
				to communicate wih the STS endpoint to request session/role
				credentials.

				These are loaded and queried in sequence for a valid set of credentials.
				Each listed class must implement one of the following means of
				construction, which are attempted in order:
				* a public constructor accepting java.net.URI and
				org.apache.hadoop.conf.Configuration,
				* a public constructor accepting org.apache.hadoop.conf.Configuration,
				* a public static method named getInstance that accepts no
				arguments and returns an instance of
				com.amazonaws.auth.AWSCredentialsProvider, or
				* a public default constructor.

				Specifying org.apache.hadoop.fs.s3a.AnonymousAWSCredentialsProvider allows
				anonymous access to a publicly accessible S3 bucket without any credentials.
				Please note that allowing anonymous access to an S3 bucket compromises
				security and therefore is unsuitable for most use cases. It can be useful
				for accessing public data sets without requiring AWS credentials.

				If unspecified, then the default list of credential provider classes,
				queried in sequence, is:
				* org.apache.hadoop.fs.s3a.TemporaryAWSCredentialsProvider: looks
				for session login secrets in the Hadoop configuration.
				* org.apache.hadoop.fs.s3a.SimpleAWSCredentialsProvider:
				Uses the values of fs.s3a.access.key and fs.s3a.secret.key.
				* com.amazonaws.auth.EnvironmentVariableCredentialsProvider: supports
				configuration of AWS access key ID and secret access key in
				environment variables named AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY,
				and AWS_SESSION_TOKEN as documented in the AWS SDK.
				* org.apache.hadoop.fs.s3a.auth.IAMInstanceCredentialsProvider: picks up
				IAM credentials of any EC2 VM or AWS container in which the process is running.
			</description>
		</property>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.apache.hadoop</groupId>
			<artifactId>hadoop-client</artifactId>
			<version>${hadoop.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.hadoop</groupId>
			<artifactId>hadoop-aws</artifactId>
			<version>${hadoop.version}</version>
		</dependency>
	</dependencies>

</project>
